version: "3.8"

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 30s
      retries: 5
      start_period: 60s
      timeout: 30s

  gateway:
    image: nginx:1.25-bookworm
    volumes:
      - ./gateway_nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8000:80"
    depends_on:
      order-service:
        condition: service_healthy
      stock-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - kafka-network

  order-service:
    build: ./order
    image: order:latest
    environment:
      - GATEWAY_URL=http://gateway:80
      - KAFKA_BROKER=kafka:9092
    command: gunicorn -k uvicorn.workers.UvicornWorker -b 0.0.0.0:5000 --timeout 30 --log-level=info app:app
    env_file:
      - env/order_redis.env
    depends_on:
      kafka:
        condition: service_healthy
      order-db-sentinel:
        condition: service_started
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  order-db-primary:
    image: redis:7.2-bookworm
    container_name: order-db-primary
    command: >
      redis-server
      --requirepass redis
      --appendonly yes
      --maxmemory 512mb
    networks:
      - kafka-network

  order-db-replica:
    image: redis:7.2-bookworm
    container_name: order-db-replica
    command: >
      redis-server
      --requirepass redis
      --appendonly yes
      --maxmemory 512mb
      --replicaof order-db-primary 6379
      --masterauth redis
    depends_on:
      - order-db-primary
    networks:
      - kafka-network

  order-db-sentinel:
    image: redis:7.2-bookworm
    container_name: order-db-sentinel
    command: >
      redis-sentinel /etc/redis/sentinel.conf
      --port 26379
      --sentinel monitor ordermaster order-db-primary 6379 1
      --sentinel auth-pass ordermaster redis
      --sentinel down-after-milliseconds ordermaster 5000
      --sentinel failover-timeout ordermaster 10000
      --sentinel parallel-syncs ordermaster 1
    depends_on:
      - order-db-primary
      - order-db-replica
    ports:
      - "26379:26379"
    networks:
      - kafka-network

  stock-service:
    build: ./stock
    image: stock:latest
    environment:
      - KAFKA_BROKER=kafka:9092
    command: gunicorn -k uvicorn.workers.UvicornWorker -b 0.0.0.0:5000 --timeout 30 --log-level=info app:app
    env_file:
      - env/stock_redis.env
    depends_on:
      kafka:
        condition: service_healthy
      stock-db-sentinel:
        condition: service_started
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  stock-db-primary:
    image: redis:7.2-bookworm
    container_name: stock-db-primary
    command: >
      redis-server
      --requirepass redis
      --appendonly yes
      --maxmemory 512mb
    networks:
      - kafka-network

  stock-db-replica:
    image: redis:7.2-bookworm
    container_name: stock-db-replica
    command: >
      redis-server
      --requirepass redis
      --appendonly yes
      --maxmemory 512mb
      --replicaof stock-db-primary 6379
      --masterauth redis
    depends_on:
      - stock-db-primary
    networks:
      - kafka-network

  stock-db-sentinel:
    image: redis:7.2-bookworm
    container_name: stock-db-sentinel
    command: >
      redis-sentinel /etc/redis/sentinel.conf
      --port 26379
      --sentinel monitor stockmaster stock-db-primary 6379 1
      --sentinel auth-pass stockmaster redis
      --sentinel down-after-milliseconds stockmaster 5000
      --sentinel failover-timeout stockmaster 10000
      --sentinel parallel-syncs stockmaster 1
    depends_on:
      - stock-db-primary
      - stock-db-replica
    ports:
      - "26380:26379"
    networks:
      - kafka-network

  payment-service:
    build: ./payment
    image: user:latest
    environment:
      - KAFKA_BROKER=kafka:9092
    command: gunicorn -k uvicorn.workers.UvicornWorker -b 0.0.0.0:5000 --timeout 30 --log-level=info app:app
    env_file:
      - env/payment_redis.env
    depends_on:
      kafka:
        condition: service_healthy
      payment-db-sentinel:
        condition: service_started
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  payment-db-primary:
    image: redis:7.2-bookworm
    container_name: payment-db-primary
    command: >
      redis-server
      --requirepass redis
      --appendonly yes
      --maxmemory 512mb
    networks:
      - kafka-network

  payment-db-replica:
    image: redis:7.2-bookworm
    container_name: payment-db-replica
    command: >
      redis-server
      --requirepass redis
      --appendonly yes
      --maxmemory 512mb
      --replicaof payment-db-primary 6379
      --masterauth redis
    depends_on:
      - payment-db-primary
    networks:
      - kafka-network

  payment-db-sentinel:
    image: redis:7.2-bookworm
    container_name: payment-db-sentinel
    command: >
      redis-sentinel /etc/redis/sentinel.conf
      --port 26379
      --sentinel monitor paymentmaster payment-db-primary 6379 1
      --sentinel auth-pass paymentmaster redis
      --sentinel down-after-milliseconds paymentmaster 5000
      --sentinel failover-timeout paymentmaster 10000
      --sentinel parallel-syncs paymentmaster 1
    depends_on:
      - payment-db-primary
      - payment-db-replica
    ports:
      - "26381:26379"
    networks:
      - kafka-network

networks:
  kafka-network:
    driver: bridge
